AWSTemplateFormatVersion: "2010-09-09"
Description: Retrieves AWS Backup details across AWS organization
Transform: 'AWS::LanguageExtensions'
Parameters:
  DatabaseName:
    Type: String
    Description: Name of the Athena database to be created to hold lambda information
    Default: optimization_data
  DestinationBucket:
    Type: String
    Description: Name of the S3 Bucket that exists or needs to be created to hold backup information
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  DestinationBucketARN:
    Type: String
    Description: ARN of the S3 Bucket that exists or needs to be created to hold backup information
  ManagementRoleName:
    Type: String
    Description: The name of the IAM role that will be deployed in the management account which can retrieve AWS Organization data. KEEP THE SAME AS WHAT IS DEPLOYED INTO MANAGEMENT ACCOUNT
  CFDataName:
    Type: String
    Description: The name of what this cf is doing.
    Default: backup
  GlueRoleARN:
    Type: String
    Description: Arn for the Glue Crawler role
  Schedule:
    Type: String
    Description: EventBridge Schedule to trigger the data collection
    Default: "rate(14 days)"
  ResourcePrefix:
    Type: String
    Description: This prefix will be placed in front of all roles created. Note you may wish to add a dash at the end to make more readable
  LambdaAnalyticsARN:
    Type: String
    Description: Arn of lambda for Analytics
  AccountCollectorLambdaARN:
    Type: String
    Description: Arn of the Account Collector Lambda
  CodeBucket:
    Type: String
    Description: Source code bucket
  StepFunctionTemplate:
    Type: String
    Description: S3 key to the JSON template for the StepFunction
  StepFunctionExecutionRoleARN:
    Type: String
    Description: Common role for Step Function execution
  SchedulerExecutionRoleARN:
    Type: String
    Description: Common role for module Scheduler execution
  AwsObjects:
    Type: CommaDelimitedList
    Default: BackupJobs, RestoreJobs, CopyJobs
    Description: Objects for pulling backup data

Mappings:
  ServicesMap:
    BackupJobs:
      path: backup-jobs
    RestoreJobs:
      path: restore-jobs
    CopyJobs:
      path: copy-jobs

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}${CFDataName}-LambdaRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Path: /
      Policies:
        - PolicyName: !Sub "${CFDataName}-ManagementAccount-LambdaRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource: !Sub "arn:${AWS::Partition}:iam::*:role/${ManagementRoleName}" # Need to assume a Read role in all Management accounts
        - PolicyName: "S3-Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:PutObjectAcl"
                Resource:
                  - !Sub "${DestinationBucketARN}/*"
              - Effect: "Allow"
                Action:
                  - "s3:ListBucket"
                Resource:
                  - !Sub "${DestinationBucketARN}"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: "Need explicit name to identify role actions"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ResourcePrefix}${CFDataName}-Lambda'
      Description: !Sub "Lambda function to retrieve ${CFDataName}"
      Runtime: python3.12
      Architectures: [x86_64]
      Code:
        ZipFile: |
          import os
          import json
          import logging
          import itertools
          from datetime import date, timedelta, datetime

          import boto3

          logger = logging.getLogger()
          logger.setLevel(getattr(logging, os.environ.get('LOG_LEVEL', 'INFO').upper(), logging.INFO))

          BUCKET_NAME = os.environ['BUCKET_NAME']
          ROLENAME = os.environ['ROLENAME']
          PREFIX = os.environ['PREFIX']
          TMP_FILE = "/tmp/data.json"

          def to_json(obj):
              """json helper for date, time and data"""
              def _date_transformer(obj):
                  return obj.isoformat() if isinstance(obj, (date, datetime)) else None
              return json.dumps(obj, default=_date_transformer)

          def store_to_s3(records, path):
              """ Upload records to s3 """
              count = 0
              with open(TMP_FILE, "w", encoding='utf-8') as json_file:
                  for count, record in enumerate(records, start=1):
                      json_file.write(to_json(record) + '\n')
              if not count:
                  logger.info(f"No records for {path}")
                  return count
              key = date.today().strftime(f"{path}/year=%Y/month=%m/day=%d/%Y-%m-%d.json")
              boto3.client('s3').upload_file(TMP_FILE, BUCKET_NAME, key)
              logger.info(f'Uploaded {count} records to s3://{BUCKET_NAME}/{key}')
              return count

          def iterate_paginated_results(client, function, search, params=None):
              yield from client.get_paginator(function).paginate(**(params or {})).search(search)

          def flatten_dict(data, parent_key='',sep='_'):
              res = {}
              for key,value in data.items():
                  new_key = parent_key + sep + key if parent_key else key
                  if isinstance(value, dict):
                      res.update(flatten_dict(value, new_key, sep=sep))
                  elif isinstance(value, datetime):
                      res[new_key] = value.isoformat()
                  else:
                      res[new_key] = value
              return res

          def last_updated_date(s3_path, max_days=30):
              ''' Returns the latest time any object under the path has been modified or last x days '''
              start_date = datetime.now().date() - timedelta(days=max_days)
              s3_content_iterator = iterate_paginated_results(
                  client=boto3.client('s3'),
                  function='list_objects_v2',
                  params=dict(Bucket=BUCKET_NAME, Prefix=s3_path), #pylint: disable=R1735
                  search='Contents',
              )
              s3_content_iterator = filter(lambda x: x is not None, s3_content_iterator)
              dates_iterator = map(lambda obj: obj['LastModified'].date(), s3_content_iterator)
              return max(itertools.chain([start_date], dates_iterator))

          def lambda_handler(event, context): #pylint: disable=unused-argument
              """ this lambda collects backup copy and restore jobs
              and must be called from the corresponding Step Function to orchestrate
              """
              logger.info(f"Event data: {event}")
              if 'account' not in event or 'params' not in event  :
                  raise ValueError(
                      "Please do not trigger this Lambda manually."
                      "Find the corresponding state machine in Step Functions and Trigger from there."
                  )
              params = [p for p in event.get('params', '').split() if p]
              name = params[0]
              account = json.loads(event["account"])
              account_id = account["account_id"]
              payer_id = account["payer_id"]
              region = boto3.session.Session().region_name
              partition = boto3.session.Session().get_partition_for_region(region_name=region)
              creds = boto3.client('sts').assume_role(
                  RoleArn=f"arn:{partition}:iam::{account_id}:role/{ROLENAME}",
                  RoleSessionName="cross_acct_lambda"
              )['Credentials']
              backup = boto3.client(
                  "backup",
                  "us-east-1",     #FIXME: what about other regions?
                  aws_access_key_id=creds['AccessKeyId'],
                  aws_secret_access_key=creds['SecretAccessKey'],
                  aws_session_token=creds['SessionToken'],
              )
              s3_prefix = f'{PREFIX}/{PREFIX}-{name}-data/payer_id={payer_id}'
              start_date = last_updated_date(s3_prefix)
              end_date = datetime.now().date()
              data_iterator = iterate_paginated_results(
                  client=backup,
                  function='list_' + name.replace("-", "_"), # ex: copy-jobs -> list_copy_jobs
                  search=name.title().replace("-", ""),      # ex: copy-jobs -> CopyJobs
                  params=dict( #pylint: disable=R1735
                      ByCompleteAfter=str(start_date),
                      ByCompleteBefore=str(end_date),
                      ByAccountId='*',
                  ),
              )
              flatten_data_iterator = map(flatten_dict, data_iterator)
              count = 0
              try:
                  count = store_to_s3(flatten_data_iterator, s3_prefix)
              except backup.exceptions.ClientError as exc:
                  if 'Insufficient privileges to perform this action.' in str(exc):
                      raise Exception(
                        'You need to activate cross account jobs monitoring '
                        'https://docs.aws.amazon.com/aws-backup/latest/devguide/manage-cross-account.html#enable-cross-account'
                      ) from exc #pylint: disable=broad-exception-raised
                  raise

              return f"Recorded {count}"

      Handler: "index.lambda_handler"
      MemorySize: 2688
      Timeout: 600
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref DestinationBucket
          PREFIX: !Ref CFDataName
          ROLENAME: !Ref ManagementRoleName
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89 # Lambda functions should be deployed inside a VPC
            reason: "No need for VPC in this case"
          - id: W92 #  Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
            reason: "No need for simultaneous execution"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 60

  'Fn::ForEach::Object':
    - AwsObject
    - !Ref AwsObjects
    - 'Crawler${AwsObject}':
        Type: AWS::Glue::Crawler
        Properties:
          Name: !Sub '${ResourcePrefix}${CFDataName}-${AwsObject}-Crawler'
          Role: !Ref GlueRoleARN
          DatabaseName: !Ref DatabaseName
          Targets:
            S3Targets:
              - Path:
                  Fn::Sub:
                    - "s3://${DestinationBucket}/${CFDataName}/${CFDataName}-${path}-data/"
                    - path: !FindInMap [ServicesMap, !Ref AwsObject, path]
          Configuration: |
            {
              "Version": 1.0,
              "CrawlerOutput": {
                "Partitions": {
                  "AddOrUpdateBehavior": "InheritFromTable"
                }
              }
            }
      'StepFunction${AwsObject}':
        Type: AWS::StepFunctions::StateMachine
        Properties:
          StateMachineName: !Sub '${ResourcePrefix}${CFDataName}-${AwsObject}-StateMachine'
          StateMachineType: STANDARD
          RoleArn: !Ref StepFunctionExecutionRoleARN
          DefinitionS3Location:
            Bucket: !Ref CodeBucket
            Key: !Ref StepFunctionTemplate
          DefinitionSubstitutions:
            AccountCollectorLambdaARN: !Ref AccountCollectorLambdaARN
            ModuleLambdaARN: !GetAtt LambdaFunction.Arn
            Crawlers: !Sub '["${ResourcePrefix}${CFDataName}-${AwsObject}-Crawler"]'
            CollectionType: "Payers" #TODO: use delegated account instead of management
            Params: !FindInMap [ServicesMap, !Ref AwsObject, path]
            Module: !Ref CFDataName
            DeployRegion: !Ref AWS::Region
            Account: !Ref AWS::AccountId
            Prefix: !Ref ResourcePrefix
      'RefreshSchedule${AwsObject}':
        Type: AWS::Scheduler::Schedule
        Properties:
          Description: !Sub 'Scheduler for the ODC ${CFDataName} ${AwsObject} module'
          Name: !Sub '${ResourcePrefix}${CFDataName}-${AwsObject}-RefreshSchedule'
          ScheduleExpression: !Ref Schedule
          State: ENABLED
          FlexibleTimeWindow:
            MaximumWindowInMinutes: 30
            Mode: 'FLEXIBLE'
          Target:
            Arn: !GetAtt [!Sub 'StepFunction${AwsObject}', Arn]
            RoleArn: !Ref SchedulerExecutionRoleARN

  AnalyticsExecutor:
    Type: Custom::LambdaAnalyticsExecutor
    Properties:
      ServiceToken: !Ref LambdaAnalyticsARN
      Name: !Ref CFDataName
