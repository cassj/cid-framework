AWSTemplateFormatVersion: '2010-09-09'
Description: Retrieves Inventory data for the chosen service
Transform: 'AWS::LanguageExtensions'
Parameters:
  DatabaseName:
    Type: String
    Description: Name of the Athena database to be created to hold lambda information
    Default: optimization_data
  DestinationBucket:
    Type: String
    Description: Name of the S3 Bucket to be created to hold data information
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  DestinationBucketARN:
    Type: String
    Description: ARN of the S3 Bucket that exists or needs to be created to hold rightsizing information
  MultiAccountRoleName:
    Type: String
    Description: Name of the IAM role deployed in all accounts which can retrieve AWS Data.
  CFDataName:
    Type: String
    Description: The name of what this cf is doing.
    Default: inventory
  GlueRoleARN:
    Type: String
    Description: Arn for the Glue Crawler role
  Schedule:
    Type: String
    Description: EventBridge Schedule to trigger the data collection
    Default: "rate(14 days)"
  ResourcePrefix:
    Type: String
    Description: This prefix will be placed in front of all roles created. Note you may wish to add a dash at the end to make more readable
  RegionsInScope:
    Type: String
    Description: "Comma Delimited list of AWS regions from which data about resources will be collected. Example: us-east-1,eu-west-1,ap-northeast-1"
  LambdaAnalyticsARN:
    Type: String
    Description: Arn of lambda for Analytics
  AccountCollectorLambdaARN:
    Type: String
    Description: Arn of the Account Collector Lambda
  StepFunctionTemplate:
    Type: String
    Description: JSON representation of common StepFunction template
  StepFunctionExecutionRoleARN:
    Type: String
    Description: Common role for Step Function execution
  SchedulerExecutionRoleARN:
    Type: String
    Description: Common role for module Scheduler execution
  AwsObjects:
    Type: CommaDelimitedList
    Default: OpensearchDomains, ElasticacheClusters, RdsDbInstances, EBS, AMI, Snapshot, Ec2Instances, VpcInstances, RdsDbSnapshots
    Description: Services for pulling price data

Mappings:
  ServicesMap:
    OpensearchDomains:
      path: opensearch-domains
    ElasticacheClusters:
      path: elasticache-clusters
    RdsDbInstances:
      path: rds-db-instances
    RdsDbSnapshots:
      path: rds-db-snapshots
    EBS:
      path: ebs
    AMI:
      path: ami
    Snapshot:
      path: snapshot
    Ec2Instances:
      path: ec2-instances
    VpcInstances:
      path: vpc

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}${CFDataName}-LambdaRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: "AssumeMultiAccountRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource: !Sub "arn:aws:iam::*:role/${MultiAccountRoleName}"
        - PolicyName: "S3Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource:
                  - !Sub "${DestinationBucketARN}/*"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: "Need explicit name to identify role actions"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ResourcePrefix}${CFDataName}-Lambda'
      Description: !Sub "Lambda Function to retrieve ${CFDataName}"
      Runtime: python3.10
      Architectures: [x86_64]
      Code:
        ZipFile: |
          """ Scan linked accounts and store instances info to s3 bucket
          Supported types: ebs, snapshots, ami, rds instances
          """
          import os
          import json
          import logging
          from functools import partial, lru_cache
          from datetime import datetime, date

          import boto3
          from botocore.client import Config

          TMP_FILE = "/tmp/data.json"
          PREFIX = os.environ['PREFIX']
          BUCKET = os.environ["BUCKET_NAME"]
          ROLENAME = os.environ['ROLENAME']
          REGIONS = [r.strip() for r in os.environ["REGIONS"].split(',') if r]
          TRACKING_TAGS = os.environ.get("TRACKING_TAGS")
          TAG_LIST = TRACKING_TAGS.split(",") if TRACKING_TAGS else []

          logger = logging.getLogger(__name__)
          logger.setLevel(getattr(logging, os.environ.get('LOG_LEVEL', 'INFO').upper(), logging.INFO))

          def to_json(obj):
              """json helper for date time data"""
              return json.dumps(
                  obj,
                  default=lambda x:
                      x.isoformat() if isinstance(x, (date, datetime)) else None
              )

          @lru_cache(maxsize=10000)
          def assume_session(account_id, region):
              """assume role in account"""
              credentials = boto3.client('sts', region_name=region).assume_role(
                  RoleArn=f"arn:aws:iam::{account_id}:role/{ROLENAME}" ,
                  RoleSessionName="data_collection"
              )['Credentials']
              return boto3.session.Session(
                  aws_access_key_id=credentials['AccessKeyId'],
                  aws_secret_access_key=credentials['SecretAccessKey'],
                  aws_session_token=credentials['SessionToken']
              )

          def paginated_scan(service, account_id, function_name, region, params=None, obj_name=None):
              """ paginated scan """
              obj_name = obj_name or function_name.split('_')[-1].capitalize() + '[*]'
              session = assume_session(account_id, region)
              client = session.client(service, region_name=region)
              try:
                  paginator = client.get_paginator(function_name)
                  for obj in paginator.paginate(**(params or {})).search(obj_name):
                      yield obj
              except Exception as exc:  #pylint: disable=broad-exception-caught
                  logger.info(f'Error in scan {function_name}/{account_id}: {exc}')


          def opensearch_domains_scan(account_id, region):
              """ special treatment for opensearch_scan """
              service = 'opensearch'
              session = assume_session(account_id, region)
              client = session.client(service, region_name=region)
              try:
                  domain_names = [name.get('DomainName') for name in client.list_domain_names().get('DomainNames', [])]
                  for domain_name in domain_names:
                      domain = client.describe_domain(DomainName=domain_name)['DomainStatus']
                      yield {
                          'DomainName': domain['DomainName'],
                          'DomainId': domain['DomainId'],
                          'EngineVersion': domain['EngineVersion'],
                          'InstanceType': domain['ClusterConfig']['InstanceType'],
                          'InstanceCount': domain['ClusterConfig']['InstanceCount'],
                      }
              except Exception as exc:  #pylint: disable=broad-exception-caught
                  logger.info(f'scan {service}/{account_id}/{region}: {exc}')

          def lambda_handler(event, context): #pylint: disable=unused-argument
              """ this lambda collects ami, snapshots and volumes from linked accounts
              and must be called from the corresponding Step Function to orchestrate
              """
              logger.info(f"Event data: {event}")
              if 'account' not in event or 'params' not in event  :
                  raise ValueError(
                      "Please do not trigger this Lambda manually."
                      "Find the corresponding state machine in Step Functions and Trigger from there."
                  )
              params = [p for p in event.get('params', '').split() if p]
              name = params[0]

              sub_modules = {
                  'opensearch-domains': opensearch_domains_scan, # special function for opensearch
                  'elasticache-clusters': partial(
                      paginated_scan,
                      service='elasticache',
                      function_name='describe_cache_clusters',
                      obj_name='CacheClusters'
                      # fields=['CacheClusterId', 'CacheNodeType', 'EngineVersion', 'Engine', 'NumCacheNodes', 'PreferredAvailabilityZone', 'CacheClusterCreateTime'],
                  ),
                  'rds-db-instances': partial(
                      paginated_scan,
                      service='rds',
                      function_name='describe_db_instances',
                      obj_name='DBInstances[*]'
                  ),
                  'rds-db-snapshots': partial(
                      paginated_scan,
                      service='rds',
                      function_name='describe_db_snapshots',
                      obj_name='DBSnapshots[*]'
                  ),
                  'ebs': partial(
                      paginated_scan,
                      service='ec2',
                      function_name='describe_volumes'
                  ),
                  'ami': partial(
                      paginated_scan,
                      service='ec2',
                      function_name='describe_images',
                      params={'Owners': ['self']}
                  ),
                  'snapshot': partial(
                      paginated_scan,
                      service='ec2',
                      function_name='describe_snapshots',
                      params={'OwnerIds': ['self']}
                  ),
                  'ec2-instances': partial(
                      paginated_scan,
                      service='ec2',
                      function_name='describe_instances',
                      obj_name='Reservations[*].Instances[*][]'
                  ),
                  'vpc': partial(
                      paginated_scan,
                      service='ec2',
                      function_name='describe_vpcs'
                  )
              }

              account = json.loads(event["account"])
              account_id = account["account_id"]
              payer_id = account["payer_id"]
              func = sub_modules[name]
              counter = 0
              logger.info(f"Collecting {name} for account {account_id}")
              collection_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
              try:
                  with open(TMP_FILE, "w", encoding='utf-8') as file_:
                      for region in REGIONS:
                          logger.info(f"Collecting in {region}")
                          for counter, obj in enumerate(func(account_id=account_id,region=region), start=counter + 1):
                              obj['accountid'] = account_id
                              if len(TAG_LIST) > 0 and "Tags" in obj:
                                  logger.debug(f"Tags enabled and found tags {obj['Tags']}")
                                  for tag in obj["Tags"]:
                                      if tag["Key"] in TAG_LIST:
                                          obj[f"tag_{tag['Key']}"] = tag["Value"]
                              obj['collection_date'] = collection_date
                              obj['region'] = region
                              file_.write(to_json(obj) + "\n")
                  logger.info(f"Collected {counter} total {name} instances")
                  upload_to_s3(name, account_id, payer_id)
              except Exception as exc:   #pylint: disable=broad-exception-caught
                  logger.info(f"{name}: {type(exc)} - {exc}" )

          def upload_to_s3(name, account_id, payer_id):
              """upload"""
              if os.path.getsize(TMP_FILE) == 0:
                  logger.info(f"No data in file for {name}")
                  return
              key =  datetime.now().strftime(
                  f"{PREFIX}/{PREFIX}-{name}-data/payer_id={payer_id}"
                  f"/year=%Y/month=%m/day=%d/{account_id}-%Y-%m-%d.json"
              )
              s3client = boto3.client("s3", config=Config(s3={"addressing_style": "path"}))
              try:
                  s3client.upload_file(TMP_FILE, BUCKET, key)
                  logger.info(f"Data {account_id} in s3 - {BUCKET}/{key}")
              except Exception as exc:  #pylint: disable=broad-exception-caught
                  logger.info(exc)

      Handler: 'index.lambda_handler'
      MemorySize: 2688
      Timeout: 300
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref DestinationBucket
          PREFIX: !Ref CFDataName
          ROLENAME: !Ref MultiAccountRoleName
          REGIONS: !Ref RegionsInScope

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 60

  'Fn::ForEach::Object':
    - AwsObject
    - !Ref AwsObjects
    - 'Crawler${AwsObject}':
        Type: AWS::Glue::Crawler
        Properties:
          Name: !Sub '${ResourcePrefix}${CFDataName}-${AwsObject}-Crawler'
          Role: !Ref GlueRoleARN
          DatabaseName: !Ref DatabaseName
          Targets:
            S3Targets:
              - Path:
                  Fn::Sub:
                    - "s3://${DestinationBucket}/inventory/inventory-${path}-data/"
                    - path: !FindInMap [ServicesMap, !Ref AwsObject, path]
          Configuration: |
            {
              "Version": 1.0,
              "CrawlerOutput": {
                "Partitions": {
                  "AddOrUpdateBehavior": "InheritFromTable"
                }
              }
            }
      'StepFunction${AwsObject}':
        Type: AWS::StepFunctions::StateMachine
        Properties:
          StateMachineName: !Sub '${ResourcePrefix}${CFDataName}-${AwsObject}-StateMachine'
          StateMachineType: STANDARD
          RoleArn: !Ref StepFunctionExecutionRoleARN
          DefinitionString: !Ref StepFunctionTemplate
          DefinitionSubstitutions:
            AccountCollectorLambdaARN: !Ref AccountCollectorLambdaARN
            ModuleLambdaARN: !GetAtt LambdaFunction.Arn
            Crawlers: !Sub '["${ResourcePrefix}${CFDataName}-${AwsObject}-Crawler"]'
            CollectionType: "LINKED"
            Params: !FindInMap [ServicesMap, !Ref AwsObject, path]
            Module: !Ref CFDataName
            DeployRegion: !Ref AWS::Region
            Account: !Ref AWS::AccountId
            Prefix: !Ref ResourcePrefix
      'RefreshSchedule${AwsObject}':
        Type: AWS::Scheduler::Schedule
        Properties:
          Description: !Sub 'Scheduler for the ODC ${CFDataName} ${AwsObject} module'
          Name: !Sub '${ResourcePrefix}${CFDataName}-${AwsObject}-RefreshSchedule'
          ScheduleExpression: !Ref Schedule
          State: ENABLED
          FlexibleTimeWindow:
            MaximumWindowInMinutes: 30
            Mode: 'FLEXIBLE'
          Target:
            Arn: !GetAtt [!Sub 'StepFunction${AwsObject}', Arn]
            RoleArn: !Ref SchedulerExecutionRoleARN

  AnalyticsExecutor:
    Type: Custom::LambdaAnalyticsExecutor
    Properties:
      ServiceToken: !Ref LambdaAnalyticsARN
      Name: !Ref CFDataName

  AthenaSnaphotAMI:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Identifies snapshots connected to AMI's
      Name: inventory_snapshot_connected_to_ami
      QueryString: !Sub |
        SELECT distinct(snapshotid),volume,volumesize,starttime,snapdescription, ownerid,
        snap_ami_id, imageid, name, description, state, rootdevicetype, virtualizationtype,year, month,
        CASE
        WHEN snap_ami_id = imageid THEN 'AMI Avalible'
        WHEN snap_ami_id LIKE 'ami%' THEN 'AMI Removed'
        ELSE 'Not AMI'
        END AS status
          FROM (
        (SELECT snapshotid,
            volumeid as volume,
            volumesize,
            starttime,
            Description AS snapdescription,
            year,
            month,
            ownerid,

            CASE
            WHEN substr(Description, 1, 22) = 'Created by CreateImage' THEN
            split_part(Description,' ', 5)
            WHEN substr(Description, 2, 11) = 'Copied snap' THEN
            split_part(Description,' ', 9)
            WHEN substr(Description, 1, 22) = 'Copied for Destination' THEN
            split_part(Description,' ', 4)
            ELSE ''
            END AS snap_ami_id
        FROM ${DatabaseName}.inventory_snapshot_data
        ) AS snapshots
        LEFT JOIN
            (SELECT imageid,
            name,
            description,
            state,
            rootdevicetype,
            virtualizationtype
            FROM ${DatabaseName}.inventory_ami_data) AS ami
                ON snapshots.snap_ami_id = ami.imageid )

  AthenaSnaphotAMICUR:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Identifies snapshots connected to AMI's with CUR data
      Name: inventory_snapshot_connected_to_ami_with_CUR
      QueryString: |
          SELECT DISTINCT
            snapshotid
          , volume
          , volumesize
          , starttime
          , snapdescription
          , ownerid
          , snap_ami_id
          , imageid
          , name
          , description
          , state
          , rootdevicetype
          , virtualizationtype
          , snapshots.year
          , snapshots.month
          , (CASE WHEN (snap_ami_id = imageid) THEN 'AMI Available' WHEN (snap_ami_id LIKE 'ami%') THEN 'AMI Removed' ELSE 'Not AMI' END) status
          ,sum_line_item_usage_amount
          ,sum_line_item_unblended_cost
          FROM
          (SELECT
              snapshotid
            , volumeid volume
            , volumesize
            , starttime
            , Description snapdescription
            , inventory_snapshot_data.year
            , inventory_snapshot_data.month
            , ownerid
            , (CASE WHEN ("substr"(Description, 1, 22) = 'Created by CreateImage') THEN "split_part"(Description, ' ', 5) WHEN ("substr"(Description, 2, 11) = 'Copied snap') THEN "split_part"(Description, ' ', 9) WHEN ("substr"(Description, 1, 22) = 'Copied for Destination') THEN "split_part"(Description, ' ', 4) ELSE '' END) snap_ami_id
            FROM
              ${DatabaseName}.inventory_snapshot_data)
          as   snapshots
          LEFT JOIN (
            SELECT
              imageid
            , name
            , description
            , state
            , rootdevicetype
            , virtualizationtype
            FROM
              ${DatabaseName}.inventory_ami_data
          )  ami ON (snapshots.snap_ami_id = ami.imageid)
          left join
          (SELECT
                bill_payer_account_id,
                line_item_usage_account_id,
                product_region,
                split("line_item_resource_id", '/')[2]resource_id,
                ${table_name}.month,
                ${table_name}.year,
                SUM(CAST(line_item_usage_amount AS DOUBLE)) AS sum_line_item_usage_amount,
                SUM(CAST(line_item_unblended_cost AS DECIMAL(16,8))) AS sum_line_item_unblended_cost
              FROM
                ${database}.${table_name}
              WHERE
                ${date_filter}
                AND product_product_name = 'Amazon Elastic Compute Cloud'
                AND line_item_usage_type LIKE '%%EBS%%Snapshot%%'
                AND product_product_family LIKE 'Storage Snapshot'
                AND line_item_line_item_type  IN ('DiscountedUsage', 'Usage', 'SavingsPlanCoveredUsage')
              GROUP BY
                bill_payer_account_id,
                line_item_usage_account_id,
                product_region,
                "line_item_resource_id",month, year
              ORDER BY
                sum_line_item_unblended_cost DESC,
                sum_line_item_usage_amount DESC
          ) as cur
          on snapshots.snapshotid = cur.resource_id
          and snapshots.ownerid=cur.line_item_usage_account_id
          and snapshots.month=cur.month
          and snapshots.year=cur.year
          where snapshots.month = '11' and snapshots.year= '2022'

  AthenaSnaphotAMIPricing:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Identifies snapshots connected to AMI's with Pricing data
      Name: inventory_snapshot_connected_to_ami_with_pricing
      QueryString: !Sub |
        CREATE OR REPLACE VIEW snapshot_ami_quicksight_view AS
        SELECT *,
          CASE
            WHEN snap_ami_id = imageid THEN 'AMI Available'
            WHEN snap_ami_id LIKE 'ami%' THEN 'AMI Removed' ELSE 'Not AMI'
          END AS status,
         cast(priceperunit as decimal)*volumesize as est_snap_cost
        FROM ((((
            (
              SELECT snapshotid AS snap_id,
                volumeid as volume,
                volumesize,
                starttime,
                Description AS snapdescription,
                year,
                month,
                region,
                ownerid,
                CASE
                  WHEN substr(Description, 1, 22) = 'Created by CreateImage' THEN split_part(Description, ' ', 5)
                  WHEN substr(Description, 2, 11) = 'Copied snap' THEN split_part(Description, ' ', 9)
                  WHEN substr(Description, 1, 22) = 'Copied for Destination' THEN split_part(Description, ' ', 4) ELSE ''
                END AS snap_ami_id
              FROM ${DatabaseName}.inventory_snapshot_data
            ) AS snapshots
            LEFT JOIN (
              SELECT imageid,
                name,
                description,
                state,
                rootdevicetype,
                virtualizationtype,
                month as ami_month,
                year as ami_year
              FROM ${DatabaseName}.inventory_ami_data) AS ami
            ON snapshots.snap_ami_id = ami.imageid and snapshots.month=ami.ami_month and snapshots.year = ami.ami_year
          )
          LEFT JOIN (
          SELECT
            region region_code
          , regionname
          FROM
            ${DatabaseName}.pricing_regionnames_data
        )  region ON (snapshots.region = region.region_code))
        LEFT JOIN (
          SELECT DISTINCT
            volumeid volume_mapping
          , count(DISTINCT snapshotid) snap_count
          FROM
            ${DatabaseName}.inventory_snapshot_data
          GROUP BY 1
        )  mapping ON (mapping.volume_mapping = snapshots.volume)) s
        LEFT JOIN (
          SELECT
            "product family"
          , location
          , priceperunit
          , unit
          FROM
            ${DatabaseName}.pricing_ec2_data
          WHERE ((("product family" = 'Storage Snapshot') AND (usagetype LIKE '%SnapshotUsage%')) AND ("location type" = 'AWS Region'))
        )  snap_unit_price ON (s.regionname = snap_unit_price.location))

  AthenaEBSTA:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Identifies snapshots connected to AMI's with Pricing data
      Name: inventory_ebs_with_ta_data
      QueryString: !Sub |
        SELECT *
        FROM ${DatabaseName}.inventory_ebs_data
        LEFT JOIN (
          SELECT "volume id","volume name", "volume type","volume size",status,	"monthly storage cost" ,accountid as taaccountid, category, region as taregion, year as tayear,month as tamonth
          FROM ${DatabaseName}.trusted_advisor_data
          WHERE category = 'cost_optimizing' ) ta
          ON inventory_ebs_data.volumeid = ta."volume id" and inventory_ebs_data.year = ta.tayear and inventory_ebs_data.month = ta.tamonth
        LEFT JOIN (
          SELECT
            region region_code
          , regionname
          FROM ${DatabaseName}.pricing_regionnames_data
          )  region
          ON (inventory_ebs_data.region = region.region_code)

  AthenaEBSView:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Identifies snapshots connected to AMI's with Pricing data
      Name: ebs-view
      QueryString: !Sub |
        CREATE OR REPLACE VIEW inventory_ebs_view AS
        SELECT * FROM
                    ${DatabaseName}.inventory_ebs_data
                LEFT JOIN
                (select "volume id","volume name", "volume type","volume size",	"monthly storage cost" ,accountid as ta_accountid, status, category, region as ta_region, year as ta_year ,month as ta_month
                from
                ${DatabaseName}.trusted_advisor_data
                where category = 'cost_optimizing') ta
                ON inventory_ebs_data.volumeid = ta."volume id" and inventory_ebs_data.year = ta.ta_year and inventory_ebs_data.month = ta.ta_month
                LEFT JOIN (
          SELECT
            "region" "region_code"
          , regionname
          FROM
            ${DatabaseName}.pricing_regionnames_data
        )  region ON (inventory_ebs_data.region = region.region_code)

  AthenaEBSTAPricing:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Identifies snapshots connected to AMI's with Pricing data
      Name: inventory_ebs_with_ta_data_with_pricing
      QueryString: !Sub |
        CREATE OR REPLACE VIEW ebs_quicksight_view AS
          SELECT
            volumeid
          , volumetype
          , size
          , attachments
          , iops
          , region
          , accountid
          , TRY(date_parse(createtime, '%Y-%m-%d %H:%i:%s')) date_created
          , year
          , month
          , CAST(concat(year, '-', month, '-01') AS date) billing_period
          , concat(year, '-', month) date
          , (CASE status WHEN 'warning' THEN 'Underutilised' ELSE 'Healthy' END) status
          , priceperunit
          , iop_price
          , (priceperunit * size) ebs_gb_cost
          , (priceperunit * size) ebs_cost
          , (CASE WHEN (volumetype = 'io1') THEN (iop_price * CAST(iops AS integer)) WHEN (volumetype = 'io2') THEN (iop_price * CAST(iops AS integer)) ELSE 0 END) iop_cost
          FROM
            ((${DatabaseName}.inventory_ebs_view
          LEFT JOIN (
            SELECT
              "volume api name"
            , location
            , priceperunit
            , unit
            , "product family"
            FROM
              ${DatabaseName}.pricing_ec2_data
            WHERE ("product family" = 'Storage')
          )  ebs_price ON ((inventory_ebs_view.volumetype = ebs_price."volume api name") AND (inventory_ebs_view.regionname = ebs_price.location)))
          LEFT JOIN (
            SELECT
              "volume api name"
            , location
            , priceperunit iop_price
            , unit
            , "product family"
            , usagetype
            FROM
              ${DatabaseName}.pricing_ec2_data
            WHERE ((("Product Family" = 'System Operation') AND ("volume api name" IN ('io1', 'io2'))) AND ((usagetype LIKE '%EBS:VolumeP-IOPS.io2') OR (usagetype LIKE '%EBS:VolumeP-IOPS.piops')))
          )  ebs_iops_price ON ((inventory_ebs_view.volumetype = ebs_iops_price."volume api name") AND (inventory_ebs_view.regionname = ebs_iops_price.location)))
          ORDER BY volumeid DESC

  AthenaGp3Opportunity:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Identifies gp2, io1, io2 that could move to gp3
      Name: gp3-opportunity
      QueryString: !Sub |
        WITH raw_ebs_pricedata AS (
        SELECT
            pricing_regionnames_data.region,
            map_agg(
                CASE WHEN "volume api name" = 'io1' AND unit = 'GB-Mo' THEN 'io1_GB-Mo'
                    WHEN "volume api name" = 'io2' AND unit = 'GB-month' THEN 'io2_GB-Mo'
                    WHEN "volume api name" = 'gp3' AND unit = 'GB-Mo' THEN 'gp3_GB-Mo'
                    WHEN "volume api name" = 'gp2' AND unit = 'GB-Mo' THEN 'gp2_GB-Mo'
                    WHEN "volume api name" = 'io1' AND unit = 'IOPS-Mo' THEN 'io1_IOPS-Mo'
                    WHEN "volume api name" = 'io2' AND unit = 'IOPS-Mo' AND "group" = 'EBS IOPS' THEN 'io2_IOPS-Mo_tier1'
                    WHEN "volume api name" = 'io2' AND unit = 'IOPS-Mo' AND "group" = 'EBS IOPS Tier 2' THEN 'io2_IOPS-Mo_tier2'
                    WHEN "volume api name" = 'io2' AND unit = 'IOPS-Mo' AND "group" = 'EBS IOPS Tier 3' THEN 'io2_IOPS-Mo_tier3'
                    WHEN "volume api name" = 'gp3' AND unit = 'IOPS-Mo' THEN 'gp3_IOPS-Mo'
                    WHEN "volume api name" = 'gp3' AND unit = 'GiBps-mo' THEN 'gp3_GiBps-mo'
                    ELSE unit
                END, priceperunit) kv1
        FROM ${DatabaseName}.pricing_ec2_data
        JOIN ${DatabaseName}.pricing_regionnames_data ON pricing_regionnames_data.regionname = pricing_ec2_data.location
        WHERE "volume api name" IN ('io1','io2','gp3','gp2')
        GROUP BY pricing_regionnames_data.region
        ),
        pivoted_ebs_pricedata AS (
            SELECT region,
                  kv1['io1_GB-Mo'] as io1_gb_unit_cost,
                  kv1['io2_GB-Mo'] as io2_gb_unit_cost,
                  kv1['gp2_GB-Mo'] as gp2_gb_unit_cost,
                  kv1['gp3_GB-Mo'] AS gp3_gb_unit_cost,
                  kv1['io1_IOPS-Mo'] as io1_iops_unit_cost,
                  kv1['io2_IOPS-Mo_tier1'] as io2_iops_t1_unit_cost,
                  kv1['io2_IOPS-Mo_tier2'] as io2_iops_t2_unit_cost,
                  kv1['io2_IOPS-Mo_tier3'] as io2_iops_t3_unit_cost,
                  kv1['gp3_IOPS-Mo'] as gp3_iops_unit_cost,
                  kv1['gp3_GiBps-mo']/1000. AS gp3_throughput_unit_cost
            FROM raw_ebs_pricedata
        ),
        ebs_data AS (
            SELECT
                volumeid,
                "volume name",
                "volume type",
                size,
                attachments,
                iops,
                inventory_ebs_view.region,
                accountid,
                year,
                month,
                CASE status
                    WHEN 'warning' THEN 'Underutilised'
                    ELSE 'Healthy'
                END AS status,
                CASE
                    WHEN volumetype = 'io1' THEN io1_gb_unit_cost
                    WHEN volumetype = 'io2' THEN io2_gb_unit_cost
                    WHEN volumetype = 'gp2' THEN gp2_gb_unit_cost
                END as gb_unit_cost,
                CASE
                    WHEN volumetype = 'io1' THEN io1_gb_unit_cost * size
                    WHEN volumetype = 'io2' THEN io2_gb_unit_cost * size
                    WHEN volumetype = 'gp2' THEN gp2_gb_unit_cost * size
                END as current_gb_cost,
                CASE
                    WHEN volumetype = 'io1' THEN io1_iops_unit_cost
                    WHEN volumetype = 'io2' THEN io2_iops_t1_unit_cost
                    WHEN volumetype = 'gp2' THEN 0.0
                END as iops_unit_cost,
                CASE
                    WHEN volumetype = 'io1' THEN io1_iops_unit_cost * CAST(iops AS double)
                    WHEN volumetype = 'io2' THEN io2_iops_t1_unit_cost * CAST(iops AS double)
                    WHEN volumetype = 'gp2' THEN 0.0
                END as current_iops_cost,
                gp3_gb_unit_cost,
                gp3_gb_unit_cost * size AS gp3_gb_cost,
                gp3_iops_unit_cost,
                CASE
                    WHEN cast(iops as integer) <= 3000 THEN 0.0
                    ELSE (CAST(iops AS double) - 3000.) * gp3_iops_unit_cost
                END as gp3_iops_cost,
                gp3_throughput_unit_cost,
                CASE
                    WHEN volumetype = 'io1' THEN gp3_throughput_unit_cost * 500
                    WHEN volumetype = 'io2' THEN gp3_throughput_unit_cost * 500
                    WHEN volumetype = 'gp2' AND size <= 170 THEN gp3_throughput_unit_cost * (128.0 - 125.0)
                    WHEN volumetype = 'gp2' AND size > 170 THEN gp3_throughput_unit_cost * (250.0 - 125.0)
                END AS gp3_throughput_cost
            FROM ${DatabaseName}.inventory_ebs_view
            LEFT JOIN pivoted_ebs_pricedata ON pivoted_ebs_pricedata.region = inventory_ebs_view.region
            WHERE
                volumetype in('io1', 'io2', 'gp2')
                and cast(iops as integer) < 16000 )
          SELECT
              *,
              current_gb_cost + current_iops_cost AS current_total_cost,
              gp3_gb_cost + gp3_iops_cost + gp3_throughput_cost AS gp3_total_cost,
              (current_gb_cost + current_iops_cost) - (gp3_gb_cost + gp3_iops_cost + gp3_throughput_cost) as gp3_saving
          FROM inventory_ebs_data

  AthenaBackwardCompatPricingRegionNames:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Use as needed if queries were previously dependent upon pricing_region_names, which has been renamed for standardization
      Name: backward_compat_pricing_region_names
      QueryString: !Sub |
        CREATE OR REPLACE VIEW pricing_region_names AS SELECT * FROM ${DatabaseName}.pricing_regionnames_data
